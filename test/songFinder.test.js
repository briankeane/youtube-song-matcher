const songFinder = require('../src/songFinder')({ key: 'myApiKey' });
const sinon = require('sinon');
const { assert } = require('chai');
const {
  details_for_videos_200,
  song_search_200,
  channel_search_200,
  channel_detail_200,
  playlist_items_200,
  playlist_items_200_p2,
  playlist_items_200_p3,
  playlist_items_200_p4,
  playlist_items_200_p5,
  playlist_items_none_found_200
} = require('./mockResponses');
const { youTubeTimeToMS } = require('../src/utils');
const resultsRanker = require('../src/resultsRanker');

function flattenIDs(videos) {
  for (let video of videos)
    video.id = video.id.videoId;
  return videos;
}

function cloneArray(arr) {
  return arr.map(a => Object.assign({}, a));
}

describe('SongFinder', function () {
  let getDetailsForVideosStub;

  describe('getVideoDetails', function () {
    beforeEach(function () {
      getDetailsForVideosStub = sinon.stub(songFinder.api, 'getDetailsForVideos').resolves(details_for_videos_200);
    });

    afterEach(function () {
      getDetailsForVideosStub.restore();
    });
  
    it ('gets video details', async function () {
      const ids = ['1','2','3','4'];
      const result = await songFinder.getVideoDetails({ ids });
      assert.deepEqual(result, details_for_videos_200.items);
      sinon.assert.calledOnce(getDetailsForVideosStub);
      sinon.assert.calledWith(getDetailsForVideosStub, { ids });
    });

    it ('makes separate calls for over 50 ids', async function () {
      const ids = [...Array(100).keys()].map(number => `${number}`);
      getDetailsForVideosStub.onCall(0).resolves(details_for_videos_200);
      getDetailsForVideosStub.onCall(1).resolves(details_for_videos_200);
      const result = await songFinder.getVideoDetails({ ids });
      sinon.assert.calledTwice(getDetailsForVideosStub);
      sinon.assert.calledWith(getDetailsForVideosStub.firstCall, { ids: ids.slice(0,50) });
      sinon.assert.calledWith(getDetailsForVideosStub.secondCall, { ids: ids.slice(50) });
      assert.deepEqual(result, details_for_videos_200.items.concat(details_for_videos_200.items));
    });
    
    describe('addDetailsToVideos', function () {
      it ('adds details to videos', async function () {
        const videos = flattenIDs(cloneArray(song_search_200.items));
        const videosWithDetails = await songFinder.addDetailsToVideos({ videos });
        assert.equal(videos[0].durationMS, youTubeTimeToMS(details_for_videos_200.items[0].contentDetails.duration));
        assert.equal(videos[0].viewCount, details_for_videos_200.items[0].statistics.viewCount);
        assert.equal(videosWithDetails[0].description, details_for_videos_200.items[0].description);
      });
    });

    describe('getGenericMatches', function () {
      let musicVideoSearchStub;
      let songInfo = { artist: 'Will Hoge', title: 'Even If It Breaks Your Heart', durationMS: 220000 };

      beforeEach(function () {
        musicVideoSearchStub = sinon.stub(songFinder.api, 'musicVideoSearch').resolves(song_search_200);
      });

      afterEach(function () {
        musicVideoSearchStub.restore();
      });

      it ('gets generic matches', async function () {
        const matches = await songFinder.getGenericMatches(songInfo);
        assert.equal(matches.length, song_search_200.items.length);
        assert.equal(matches[0].durationMS, youTubeTimeToMS(details_for_videos_200['items'][0].contentDetails.duration));
        assert.equal(matches[0].snippet.title, song_search_200['items'][0].snippet.title);
      });
    });

    describe('findAutoGeneratedMatches', function () {
      let channelSearchStub;
      let channelDetailStub;
      let playlistItemStub;

      beforeEach(function () {
        channelSearchStub = sinon.stub(songFinder.api, 'channelSearch').resolves(channel_search_200);
        channelDetailStub = sinon.stub(songFinder.api, 'getChannelDetails').resolves(channel_detail_200);
        playlistItemStub = sinon.stub(songFinder.api, 'getPlaylistItems');
        playlistItemStub.onCall(0).resolves(playlist_items_200);
        playlistItemStub.onCall(1).resolves(playlist_items_200_p2);
        playlistItemStub.onCall(2).resolves(playlist_items_200_p3);
        playlistItemStub.onCall(3).resolves(playlist_items_200_p4);
        playlistItemStub.onCall(4).resolves(playlist_items_200_p5);
      });

      afterEach(function () {
        channelSearchStub.restore();
        channelDetailStub.restore();
        playlistItemStub.restore();
      });

      describe('getArtistChannelID', function () {
        it ('gets a channel id for an exact match', async function () {
          let id = await songFinder.getArtistChannelID({ artist: 'Will Hoge' });
          assert.equal(id, 'UCuY1Z8ah-OtwBZ4jxcKqSSg');
          id = await songFinder.getArtistChannelID({ artist: 'Mathematics' });
          assert.equal(id, 'UCT4-UAcRfvBtO76gX2vexpA');
          id = await songFinder.getArtistChannelID({ artist: 'John Richardson'});
          assert.equal(id, 'UCwH2MqK8NfwmID4qKt6vwyw');
        });

        it ('ignores case for exact matches', async function() {
          let id = await songFinder.getArtistChannelID({ artist: 'Will HOGE' });
          assert.equal(id, 'UCuY1Z8ah-OtwBZ4jxcKqSSg');
          id = await songFinder.getArtistChannelID({ artist: 'MathEMATICS' });
          assert.equal(id, 'UCT4-UAcRfvBtO76gX2vexpA');
          id = await songFinder.getArtistChannelID({ artist: 'John RICHardson'});
          assert.equal(id, 'UCwH2MqK8NfwmID4qKt6vwyw');
        });

        it ('still works for close matches', async function () {
          let id = await songFinder.getArtistChannelID({ artist: 'Will HOGEs' });
          assert.equal(id, 'UCuY1Z8ah-OtwBZ4jxcKqSSg');
          id = await songFinder.getArtistChannelID({ artist: 'MathEMMTICS' });
          assert.equal(id, 'UCT4-UAcRfvBtO76gX2vexpA');
          id = await songFinder.getArtistChannelID({ artist: 'John RICH ardson'});
          assert.equal(id, 'UCwH2MqK8NfwmID4qKt6vwyw');
        });

        it ('returns Falsy if no matches found', async function () {
          let id = await songFinder.getArtistChannelID({ artist: 'fee fi fo fum' });
          assert.notOk(id);
        });
      });

      describe('getArtistChannelID', function () {
        it ('gets the details of a channel', async function () {
          let details = await songFinder.getChannelDetails({ id: '123' });
          sinon.assert.calledWith(channelDetailStub, { id: '123' });
          assert.deepEqual(details, channel_detail_200.items[0]);
        });
      });

      describe('get playlistItems', function () {
        it ('gets playlistItems -- multiple pages if necessary', async function () {
          const id = '123';
          let items = await songFinder.getPlaylistItems({ id });
          sinon.assert.calledWith(playlistItemStub.getCall(0), { id, pageToken: undefined });
          sinon.assert.calledWith(playlistItemStub.getCall(1), { id, pageToken: playlist_items_200.nextPageToken });
          sinon.assert.calledWith(playlistItemStub.getCall(2), { id, pageToken: playlist_items_200_p2.nextPageToken });
          sinon.assert.calledWith(playlistItemStub.getCall(3), { id, pageToken: playlist_items_200_p3.nextPageToken });
          sinon.assert.calledWith(playlistItemStub.getCall(4), { id, pageToken: playlist_items_200_p4.nextPageToken });
          sinon.assert.callCount(playlistItemStub, 5);
          assert.equal(items.length, 205);
          assert.deepEqual(items[0], playlist_items_200.items[0]);
          assert.deepEqual(items[items.length-1], playlist_items_200_p5.items[playlist_items_200_p5.items.length-1]);
        });
      });

      describe('getAutoGeneratedMatches', function () {
        function stubDetailsForVideos() {
          getDetailsForVideosStub.callsFake(args => {
            const { ids } = args;
            return {
              ...details_for_videos_200,
              items: ids.map(id => {
                return {
                  'id': id,
                  'description': 'modified description',
                  'contentDetails': {
                    'duration': 'PT3M42S'  //(222000)
                  },
                  'statistics': {
                    'viewCount': 25
                  }
                };
              })
            };
          });
        }

        beforeEach(function () {
          stubDetailsForVideos();
        });

        afterEach(function() {
          getDetailsForVideosStub.restore();
        });

        it ('returns an empty array if no artist channel was found', async function () {
          channelSearchStub.resolves(playlist_items_none_found_200);
          const matches = await songFinder.getAutoGeneratedMatches({ artist: 'Will Hoge', title: 'Even If It Breaks Your Heart', durationMS: 1000 });
          assert.deepEqual(matches, []);
        });

        it ('gets a bunch of videos', async function () {
          const matches = await songFinder.getAutoGeneratedMatches({ artist: 'Will Hoge', title: 'Even If It Breaks Your Heart', durationMS: 1000 });
          assert.equal(matches.length, 205);
          assert.equal(matches[0].viewCount, 25);
          assert.equal(matches[0].description, 'modified description');
          assert.equal(matches[0].durationMS, 222000);
        });

        describe ('getSongMatches', function () {
          let musicVideoSearchStub;
          let rankAndSortStub;

          beforeEach(function () {
            //
            // music video search 2 responses -- one dupe, one original
            //
            musicVideoSearchStub = sinon.stub(songFinder.api, 'musicVideoSearch').resolves({ 
              ...song_search_200, 
              items: [
                { 
                  'id': { 'videoId': 'anExtraID' },
                  'snippet': {
                    'title': 'Will Hoge -- here is an extra song',
                    'description': 'An extra song'
                  }
                },
                { 
                  'id': { 'videoId': playlist_items_200.items[0].contentDetails.videoId },
                  'snippet': playlist_items_200.items[0].snippet
                }
              ]
            });
            rankAndSortStub = sinon.stub(resultsRanker, 'rankAndSort').callsFake(attrs => attrs.videos);
          });

          afterEach(function () {
            musicVideoSearchStub.restore();
          });

          it ('gets some song matches', async function () {
            const matches = await songFinder.getSongMatches({ artist: 'Will Hoge', title: 'Even If It Breaks Your Heart', durationMS: 22000 });
            
            assert.equal(matches.length, 205+1);  // should add only the non-duplicate
            
            // should add the details
            assert.isOk(matches[0].durationMS);
            assert.isOk(matches[0].viewCount);
            assert.isOk(matches[0].durationMS);
            assert.isOk(matches[matches.length-1].durationMS);
            assert.isOk(matches[matches.length-1].viewCount);
            assert.isOk(matches[matches.length-1].durationMS);
            
            // should pass them through the ranker
            sinon.assert.calledOnce(rankAndSortStub);
          });
        });
      });
    });
  });
});

